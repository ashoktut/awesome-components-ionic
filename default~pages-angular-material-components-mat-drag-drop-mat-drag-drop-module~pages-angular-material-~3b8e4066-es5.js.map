{"version":3,"sources":["webpack:///node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/scrolling.js"],"names":["_c0","_c1","VIRTUAL_SCROLL_STRATEGY","VirtualScrollStrategy","FixedSizeVirtualScrollStrategy","itemSize","minBufferPx","maxBufferPx","_scrolledIndexChange","scrolledIndexChange","pipe","_viewport","_itemSize","_minBufferPx","_maxBufferPx","viewport","_updateTotalContentSize","_updateRenderedRange","complete","Error","index","behavior","scrollToOffset","setTotalContentSize","getDataLength","scrollOffset","measureScrollOffset","firstVisibleIndex","renderedRange","getRenderedRange","newRange","start","end","viewportSize","getViewportSize","dataLength","startBuffer","expandStart","Math","ceil","max","min","endBuffer","expandEnd","floor","setRenderedRange","setRenderedContentOffset","next","_fixedSizeVirtualScrollStrategyFactory","fixedSizeDir","_scrollStrategy","CdkFixedSizeVirtualScroll","updateItemAndBufferSize","value","ɵfac","CdkFixedSizeVirtualScroll_Factory","t","ɵdir","type","selectors","inputs","features","provide","useFactory","deps","propDecorators","args","selector","providers","DEFAULT_SCROLL_TIME","ScrollDispatcher","_ngZone","_platform","document","_scrolled","_globalSubscription","_scrolledCount","scrollContainers","Map","_document","scrollable","has","set","elementScrolled","subscribe","scrollableReference","get","unsubscribe","auditTimeInMs","isBrowser","observer","_addGlobalListener","subscription","_removeGlobalListener","forEach","_","container","deregister","elementRef","ancestors","getAncestorScrollContainers","scrolled","target","indexOf","scrollingContainers","_subscription","_scrollableContainsElement","push","doc","_getDocument","defaultView","window","element","nativeElement","scrollableElement","getElementRef","parentElement","runOutsideAngular","_getWindow","ScrollDispatcher_Factory","ctorParameters","undefined","decorators","ɵprov","factory","token","providedIn","CdkScrollable","scrollDispatcher","ngZone","dir","_destroyed","_elementScrolled","register","options","el","isRtl","left","right","bottom","top","scrollHeight","clientHeight","scrollWidth","clientWidth","_applyScrollToOptions","scrollTo","scrollTop","scrollLeft","from","LEFT","RIGHT","CdkScrollable_Factory","DEFAULT_RESIZE_TIME","ViewportScrollPosition","ViewportRuler","_change","_invalidateCache","change","_updateViewportSize","_viewportSize","output","width","height","scrollPosition","getViewportScrollPosition","documentElement","documentRect","getBoundingClientRect","body","scrollY","scrollX","throttleTime","innerWidth","innerHeight","ViewportRuler_Factory","rangesEqual","r1","r2","SCROLL_SCHEDULER","requestAnimationFrame","CdkVirtualScrollViewport","_changeDetectorRef","viewportRuler","_detachedSubject","_renderedRangeSubject","_orientation","Promise","resolve","then","run","renderedRangeStream","asObservable","_totalContentSize","_totalContentWidth","_totalContentHeight","_renderedRange","_dataLength","_renderedContentOffset","_renderedContentOffsetNeedsRewrite","_isChangeDetectionPending","_runAfterChangeDetection","_viewportChanges","EMPTY","checkViewportSize","_measureViewportSize","attach","onContentScrolled","_markChangeDetectionNeeded","detach","forOf","_forOf","dataStream","data","newLength","length","onDataLengthChanged","_doChangeDetection","size","_calculateSpacerSize","range","onContentRendered","offset","to","isHorizontal","orientation","axis","axisDirection","transform","Number","_renderedContentTransform","measureRenderedContentSize","onRenderedOffsetChanged","scrollToIndex","contentEl","_contentWrapper","offsetWidth","offsetHeight","measureRangeSize","viewportEl","runAfter","style","markForCheck","runAfterChangeDetection","fn","CdkVirtualScrollViewport_Factory","ɵcmp","viewQuery","CdkVirtualScrollViewport_Query","rf","ctx","_t","first","hostAttrs","hostVars","hostBindings","CdkVirtualScrollViewport_HostBindings","outputs","useExisting","ngContentSelectors","decls","vars","consts","template","CdkVirtualScrollViewport_Template","styles","encapsulation","changeDetection","host","None","OnPush","getSize","node","rect","CdkVirtualForOf","_viewContainerRef","_template","_differs","viewChange","_dataSourceChanges","cdkVirtualForTemplateCacheSize","prev","cur","_changeDataSource","_differ","_templateCache","_needsUpdate","_data","_onRenderedDataChange","renderedStartIndex","rangeLen","totalSize","i","view","j","rootNodes","changes","diff","_renderedItems","_updateContext","_applyChanges","destroy","slice","find","create","cdkVirtualForTrackBy","oldDs","newDs","disconnect","connect","count","context","_updateComputedContextProperties","detectChanges","forEachOperation","record","adjustedPreviousIndex","currentIndex","previousIndex","_insertViewForNewItem","$implicit","item","_cacheView","_detachView","move","forEachIdentityChange","remove","_insertViewFromCache","_createEmbeddedViewAt","last","even","odd","createEmbeddedView","cdkVirtualForOf","_cdkVirtualForOf","cachedView","pop","insert","Array","prototype","call","_cdkVirtualForTrackBy","CdkVirtualForOf_Factory","cdkVirtualForTemplate","CdkScrollableModule","ɵmod","ɵinj","CdkScrollableModule_Factory","ngJitMode","declarations","exports","ScrollingModule","ScrollingModule_Factory","imports"],"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","file":"default~pages-angular-material-components-mat-drag-drop-mat-drag-drop-module~pages-angular-material-~3b8e4066-es5.js","sourcesContent":["import { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { InjectionToken, Directive, forwardRef, Input, Injectable, NgZone, Optional, Inject, ɵɵdefineInjectable, ɵɵinject, ElementRef, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, Output, ViewChild, ViewContainerRef, TemplateRef, IterableDiffers, SkipSelf, NgModule } from '@angular/core';\nimport { Subject, of, Observable, fromEvent, merge, animationFrameScheduler, asapScheduler, Subscription, isObservable } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, takeUntil, startWith, pairwise, switchMap, shareReplay } from 'rxjs/operators';\nimport { Platform, getRtlScrollAxisType, supportsScrollBehavior, PlatformModule } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { isDataSource, ArrayDataSource } from '@angular/cdk/collections';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/scrolling/virtual-scroll-strategy.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The injection token used to specify the virtual scrolling strategy.\n * @type {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\n\nconst _c0 = [\"contentWrapper\"];\nconst _c1 = [\"*\"];\nconst VIRTUAL_SCROLL_STRATEGY = new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n/**\n * A strategy that dictates which items should be rendered in the viewport.\n * @record\n */\nfunction VirtualScrollStrategy() { }\nif (false) {\n    /**\n     * Emits when the index of the first element visible in the viewport changes.\n     * @type {?}\n     */\n    VirtualScrollStrategy.prototype.scrolledIndexChange;\n    /**\n     * Attaches this scroll strategy to a viewport.\n     * @param {?} viewport The viewport to attach this strategy to.\n     * @return {?}\n     */\n    VirtualScrollStrategy.prototype.attach = function (viewport) { };\n    /**\n     * Detaches this scroll strategy from the currently attached viewport.\n     * @return {?}\n     */\n    VirtualScrollStrategy.prototype.detach = function () { };\n    /**\n     * Called when the viewport is scrolled (debounced using requestAnimationFrame).\n     * @return {?}\n     */\n    VirtualScrollStrategy.prototype.onContentScrolled = function () { };\n    /**\n     * Called when the length of the data changes.\n     * @return {?}\n     */\n    VirtualScrollStrategy.prototype.onDataLengthChanged = function () { };\n    /**\n     * Called when the range of items rendered in the DOM has changed.\n     * @return {?}\n     */\n    VirtualScrollStrategy.prototype.onContentRendered = function () { };\n    /**\n     * Called when the offset of the rendered items changed.\n     * @return {?}\n     */\n    VirtualScrollStrategy.prototype.onRenderedOffsetChanged = function () { };\n    /**\n     * Scroll to the offset for the given index.\n     * @param {?} index The index of the element to scroll to.\n     * @param {?} behavior The ScrollBehavior to use when scrolling.\n     * @return {?}\n     */\n    VirtualScrollStrategy.prototype.scrollToIndex = function (index, behavior) { };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/scrolling/fixed-size-virtual-scroll.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Virtual scrolling strategy for lists with items of known fixed size.\n */\nclass FixedSizeVirtualScrollStrategy {\n    /**\n     * @param {?} itemSize The size of the items in the virtually scrolling list.\n     * @param {?} minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param {?} maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    constructor(itemSize, minBufferPx, maxBufferPx) {\n        this._scrolledIndexChange = new Subject();\n        /**\n         * \\@docs-private Implemented as part of VirtualScrollStrategy.\n         */\n        this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n        /**\n         * The attached viewport.\n         */\n        this._viewport = null;\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n    }\n    /**\n     * Attaches this scroll strategy to a viewport.\n     * @param {?} viewport The viewport to attach this strategy to.\n     * @return {?}\n     */\n    attach(viewport) {\n        this._viewport = viewport;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /**\n     * Detaches this scroll strategy from the currently attached viewport.\n     * @return {?}\n     */\n    detach() {\n        this._scrolledIndexChange.complete();\n        this._viewport = null;\n    }\n    /**\n     * Update the item size and buffer size.\n     * @param {?} itemSize The size of the items in the virtually scrolling list.\n     * @param {?} minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param {?} maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     * @return {?}\n     */\n    updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n        if (maxBufferPx < minBufferPx) {\n            throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n        }\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    onContentScrolled() {\n        this._updateRenderedRange();\n    }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    onDataLengthChanged() {\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    onContentRendered() { }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    onRenderedOffsetChanged() { }\n    /**\n     * Scroll to the offset for the given index.\n     * @param {?} index The index of the element to scroll to.\n     * @param {?} behavior The ScrollBehavior to use when scrolling.\n     * @return {?}\n     */\n    scrollToIndex(index, behavior) {\n        if (this._viewport) {\n            this._viewport.scrollToOffset(index * this._itemSize, behavior);\n        }\n    }\n    /**\n     * Update the viewport's total content size.\n     * @private\n     * @return {?}\n     */\n    _updateTotalContentSize() {\n        if (!this._viewport) {\n            return;\n        }\n        this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n    }\n    /**\n     * Update the viewport's rendered range.\n     * @private\n     * @return {?}\n     */\n    _updateRenderedRange() {\n        if (!this._viewport) {\n            return;\n        }\n        /** @type {?} */\n        const scrollOffset = this._viewport.measureScrollOffset();\n        /** @type {?} */\n        const firstVisibleIndex = scrollOffset / this._itemSize;\n        /** @type {?} */\n        const renderedRange = this._viewport.getRenderedRange();\n        /** @type {?} */\n        const newRange = { start: renderedRange.start, end: renderedRange.end };\n        /** @type {?} */\n        const viewportSize = this._viewport.getViewportSize();\n        /** @type {?} */\n        const dataLength = this._viewport.getDataLength();\n        /** @type {?} */\n        const startBuffer = scrollOffset - newRange.start * this._itemSize;\n        if (startBuffer < this._minBufferPx && newRange.start != 0) {\n            /** @type {?} */\n            const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n            newRange.start = Math.max(0, newRange.start - expandStart);\n            newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n        }\n        else {\n            /** @type {?} */\n            const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n            if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n                /** @type {?} */\n                const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n                if (expandEnd > 0) {\n                    newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n                    newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n                }\n            }\n        }\n        this._viewport.setRenderedRange(newRange);\n        this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n        this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    FixedSizeVirtualScrollStrategy.prototype._scrolledIndexChange;\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @type {?}\n     */\n    FixedSizeVirtualScrollStrategy.prototype.scrolledIndexChange;\n    /**\n     * The attached viewport.\n     * @type {?}\n     * @private\n     */\n    FixedSizeVirtualScrollStrategy.prototype._viewport;\n    /**\n     * The size of the items in the virtually scrolling list.\n     * @type {?}\n     * @private\n     */\n    FixedSizeVirtualScrollStrategy.prototype._itemSize;\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * @type {?}\n     * @private\n     */\n    FixedSizeVirtualScrollStrategy.prototype._minBufferPx;\n    /**\n     * The number of buffer items to render beyond the edge of the viewport (in pixels).\n     * @type {?}\n     * @private\n     */\n    FixedSizeVirtualScrollStrategy.prototype._maxBufferPx;\n}\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param {?} fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n * @return {?}\n */\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n    return fixedSizeDir._scrollStrategy;\n}\n/**\n * A virtual scroll strategy that supports fixed-size items.\n */\nclass CdkFixedSizeVirtualScroll {\n    constructor() {\n        this._itemSize = 20;\n        this._minBufferPx = 100;\n        this._maxBufferPx = 200;\n        /**\n         * The scroll strategy used by this directive.\n         */\n        this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    /**\n     * The size of the items in the list (in pixels).\n     * @return {?}\n     */\n    get itemSize() { return this._itemSize; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set itemSize(value) { this._itemSize = coerceNumberProperty(value); }\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n     * @return {?}\n     */\n    get minBufferPx() { return this._minBufferPx; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set minBufferPx(value) { this._minBufferPx = coerceNumberProperty(value); }\n    /**\n     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n     * @return {?}\n     */\n    get maxBufferPx() { return this._maxBufferPx; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set maxBufferPx(value) { this._maxBufferPx = coerceNumberProperty(value); }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n}\nCdkFixedSizeVirtualScroll.ɵfac = function CdkFixedSizeVirtualScroll_Factory(t) { return new (t || CdkFixedSizeVirtualScroll)(); };\nCdkFixedSizeVirtualScroll.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkFixedSizeVirtualScroll, selectors: [[\"cdk-virtual-scroll-viewport\", \"itemSize\", \"\"]], inputs: { itemSize: \"itemSize\", minBufferPx: \"minBufferPx\", maxBufferPx: \"maxBufferPx\" }, features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: VIRTUAL_SCROLL_STRATEGY,\n                useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                deps: [forwardRef(( /**\n                         * @return {?}\n                         */() => CdkFixedSizeVirtualScroll))]\n            }]), ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkFixedSizeVirtualScroll.propDecorators = {\n    itemSize: [{ type: Input }],\n    minBufferPx: [{ type: Input }],\n    maxBufferPx: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkFixedSizeVirtualScroll, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-virtual-scroll-viewport[itemSize]',\n                providers: [{\n                        provide: VIRTUAL_SCROLL_STRATEGY,\n                        useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                        deps: [forwardRef(( /**\n                                 * @return {?}\n                                 */() => CdkFixedSizeVirtualScroll))]\n                    }]\n            }]\n    }], function () { return []; }, { itemSize: [{\n            type: Input\n        }], minBufferPx: [{\n            type: Input\n        }], maxBufferPx: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    CdkFixedSizeVirtualScroll.ngAcceptInputType_itemSize;\n    /** @type {?} */\n    CdkFixedSizeVirtualScroll.ngAcceptInputType_minBufferPx;\n    /** @type {?} */\n    CdkFixedSizeVirtualScroll.ngAcceptInputType_maxBufferPx;\n    /** @type {?} */\n    CdkFixedSizeVirtualScroll.prototype._itemSize;\n    /** @type {?} */\n    CdkFixedSizeVirtualScroll.prototype._minBufferPx;\n    /** @type {?} */\n    CdkFixedSizeVirtualScroll.prototype._maxBufferPx;\n    /**\n     * The scroll strategy used by this directive.\n     * @type {?}\n     */\n    CdkFixedSizeVirtualScroll.prototype._scrollStrategy;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/scrolling/scroll-dispatcher.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Time in ms to throttle the scrolling events by default.\n * @type {?}\n */\nconst DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nclass ScrollDispatcher {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _platform\n     * @param {?=} document\n     */\n    constructor(_ngZone, _platform, \n    /** @breaking-change 11.0.0 make document required */\n    document) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        /**\n         * Subject for notifying that a registered scrollable reference element has been scrolled.\n         */\n        this._scrolled = new Subject();\n        /**\n         * Keeps track of the global `scroll` and `resize` subscriptions.\n         */\n        this._globalSubscription = null;\n        /**\n         * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n         */\n        this._scrolledCount = 0;\n        /**\n         * Map of all the scrollable references that are registered with the service and their\n         * scroll event subscriptions.\n         */\n        this.scrollContainers = new Map();\n        this._document = document;\n    }\n    /**\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\n     * @param {?} scrollable Scrollable instance to be registered.\n     * @return {?}\n     */\n    register(scrollable) {\n        if (!this.scrollContainers.has(scrollable)) {\n            this.scrollContainers.set(scrollable, scrollable.elementScrolled()\n                .subscribe((/**\n             * @return {?}\n             */\n            () => this._scrolled.next(scrollable))));\n        }\n    }\n    /**\n     * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param {?} scrollable Scrollable instance to be deregistered.\n     * @return {?}\n     */\n    deregister(scrollable) {\n        /** @type {?} */\n        const scrollableReference = this.scrollContainers.get(scrollable);\n        if (scrollableReference) {\n            scrollableReference.unsubscribe();\n            this.scrollContainers.delete(scrollable);\n        }\n    }\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     * @param {?=} auditTimeInMs\n     * @return {?}\n     */\n    scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME) {\n        if (!this._platform.isBrowser) {\n            return of();\n        }\n        return new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            if (!this._globalSubscription) {\n                this._addGlobalListener();\n            }\n            // In the case of a 0ms delay, use an observable without auditTime\n            // since it does add a perceptible delay in processing overhead.\n            /** @type {?} */\n            const subscription = auditTimeInMs > 0 ?\n                this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) :\n                this._scrolled.subscribe(observer);\n            this._scrolledCount++;\n            return (/**\n             * @return {?}\n             */\n            () => {\n                subscription.unsubscribe();\n                this._scrolledCount--;\n                if (!this._scrolledCount) {\n                    this._removeGlobalListener();\n                }\n            });\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._removeGlobalListener();\n        this.scrollContainers.forEach((/**\n         * @param {?} _\n         * @param {?} container\n         * @return {?}\n         */\n        (_, container) => this.deregister(container)));\n        this._scrolled.complete();\n    }\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param {?} elementRef Element whose ancestors to listen for.\n     * @param {?=} auditTimeInMs Time to throttle the scroll events.\n     * @return {?}\n     */\n    ancestorScrolled(elementRef, auditTimeInMs) {\n        /** @type {?} */\n        const ancestors = this.getAncestorScrollContainers(elementRef);\n        return this.scrolled(auditTimeInMs).pipe(filter((/**\n         * @param {?} target\n         * @return {?}\n         */\n        target => {\n            return !target || ancestors.indexOf(target) > -1;\n        })));\n    }\n    /**\n     * Returns all registered Scrollables that contain the provided element.\n     * @param {?} elementRef\n     * @return {?}\n     */\n    getAncestorScrollContainers(elementRef) {\n        /** @type {?} */\n        const scrollingContainers = [];\n        this.scrollContainers.forEach((/**\n         * @param {?} _subscription\n         * @param {?} scrollable\n         * @return {?}\n         */\n        (_subscription, scrollable) => {\n            if (this._scrollableContainsElement(scrollable, elementRef)) {\n                scrollingContainers.push(scrollable);\n            }\n        }));\n        return scrollingContainers;\n    }\n    /**\n     * Access injected document if available or fallback to global document reference\n     * @private\n     * @return {?}\n     */\n    _getDocument() {\n        return this._document || document;\n    }\n    /**\n     * Use defaultView of injected document if available or fallback to global window reference\n     * @private\n     * @return {?}\n     */\n    _getWindow() {\n        /** @type {?} */\n        const doc = this._getDocument();\n        return doc.defaultView || window;\n    }\n    /**\n     * Returns true if the element is contained within the provided Scrollable.\n     * @private\n     * @param {?} scrollable\n     * @param {?} elementRef\n     * @return {?}\n     */\n    _scrollableContainsElement(scrollable, elementRef) {\n        /** @type {?} */\n        let element = elementRef.nativeElement;\n        /** @type {?} */\n        let scrollableElement = scrollable.getElementRef().nativeElement;\n        // Traverse through the element parents until we reach null, checking if any of the elements\n        // are the scrollable's element.\n        do {\n            if (element == scrollableElement) {\n                return true;\n            }\n        } while (element = (/** @type {?} */ (element)).parentElement);\n        return false;\n    }\n    /**\n     * Sets up the global scroll listeners.\n     * @private\n     * @return {?}\n     */\n    _addGlobalListener() {\n        this._globalSubscription = this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const window = this._getWindow();\n            return fromEvent(window.document, 'scroll').subscribe((/**\n             * @return {?}\n             */\n            () => this._scrolled.next()));\n        }));\n    }\n    /**\n     * Cleans up the global scroll listener.\n     * @private\n     * @return {?}\n     */\n    _removeGlobalListener() {\n        if (this._globalSubscription) {\n            this._globalSubscription.unsubscribe();\n            this._globalSubscription = null;\n        }\n    }\n}\nScrollDispatcher.ɵfac = function ScrollDispatcher_Factory(t) { return new (t || ScrollDispatcher)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(DOCUMENT, 8)); };\n/** @nocollapse */\nScrollDispatcher.ctorParameters = () => [\n    { type: NgZone },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ ScrollDispatcher.ɵprov = ɵɵdefineInjectable({ factory: function ScrollDispatcher_Factory() { return new ScrollDispatcher(ɵɵinject(NgZone), ɵɵinject(Platform), ɵɵinject(DOCUMENT, 8)); }, token: ScrollDispatcher, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ScrollDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\nif (false) {\n    /**\n     * Used to reference correct document/window\n     * @type {?}\n     * @protected\n     */\n    ScrollDispatcher.prototype._document;\n    /**\n     * Subject for notifying that a registered scrollable reference element has been scrolled.\n     * @type {?}\n     * @private\n     */\n    ScrollDispatcher.prototype._scrolled;\n    /**\n     * Keeps track of the global `scroll` and `resize` subscriptions.\n     * @type {?}\n     */\n    ScrollDispatcher.prototype._globalSubscription;\n    /**\n     * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n     * @type {?}\n     * @private\n     */\n    ScrollDispatcher.prototype._scrolledCount;\n    /**\n     * Map of all the scrollable references that are registered with the service and their\n     * scroll event subscriptions.\n     * @type {?}\n     */\n    ScrollDispatcher.prototype.scrollContainers;\n    /**\n     * @type {?}\n     * @private\n     */\n    ScrollDispatcher.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    ScrollDispatcher.prototype._platform;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/scrolling/scrollable.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nclass CdkScrollable {\n    /**\n     * @param {?} elementRef\n     * @param {?} scrollDispatcher\n     * @param {?} ngZone\n     * @param {?=} dir\n     */\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        this.elementRef = elementRef;\n        this.scrollDispatcher = scrollDispatcher;\n        this.ngZone = ngZone;\n        this.dir = dir;\n        this._destroyed = new Subject();\n        this._elementScrolled = new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => this.ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => fromEvent(this.elementRef.nativeElement, 'scroll').pipe(takeUntil(this._destroyed))\n            .subscribe(observer)))));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.scrollDispatcher.register(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.scrollDispatcher.deregister(this);\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Returns observable that emits when a scroll event is fired on the host element.\n     * @return {?}\n     */\n    elementScrolled() {\n        return this._elementScrolled;\n    }\n    /**\n     * Gets the ElementRef for the viewport.\n     * @return {?}\n     */\n    getElementRef() {\n        return this.elementRef;\n    }\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param {?} options specified the offsets to scroll to.\n     * @return {?}\n     */\n    scrollTo(options) {\n        /** @type {?} */\n        const el = this.elementRef.nativeElement;\n        /** @type {?} */\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        // Rewrite start & end offsets as right or left offsets.\n        if (options.left == null) {\n            options.left = isRtl ? options.end : options.start;\n        }\n        if (options.right == null) {\n            options.right = isRtl ? options.start : options.end;\n        }\n        // Rewrite the bottom offset as a top offset.\n        if (options.bottom != null) {\n            ((/** @type {?} */ (options))).top =\n                el.scrollHeight - el.clientHeight - options.bottom;\n        }\n        // Rewrite the right offset as a left offset.\n        if (isRtl && getRtlScrollAxisType() != 0 /* NORMAL */) {\n            if (options.left != null) {\n                ((/** @type {?} */ (options))).right =\n                    el.scrollWidth - el.clientWidth - options.left;\n            }\n            if (getRtlScrollAxisType() == 2 /* INVERTED */) {\n                options.left = options.right;\n            }\n            else if (getRtlScrollAxisType() == 1 /* NEGATED */) {\n                options.left = options.right ? -options.right : options.right;\n            }\n        }\n        else {\n            if (options.right != null) {\n                ((/** @type {?} */ (options))).left =\n                    el.scrollWidth - el.clientWidth - options.right;\n            }\n        }\n        this._applyScrollToOptions(options);\n    }\n    /**\n     * @private\n     * @param {?} options\n     * @return {?}\n     */\n    _applyScrollToOptions(options) {\n        /** @type {?} */\n        const el = this.elementRef.nativeElement;\n        if (supportsScrollBehavior()) {\n            el.scrollTo(options);\n        }\n        else {\n            if (options.top != null) {\n                el.scrollTop = options.top;\n            }\n            if (options.left != null) {\n                el.scrollLeft = options.left;\n            }\n        }\n    }\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param {?} from The edge to measure from.\n     * @return {?}\n     */\n    measureScrollOffset(from) {\n        /** @type {?} */\n        const LEFT = 'left';\n        /** @type {?} */\n        const RIGHT = 'right';\n        /** @type {?} */\n        const el = this.elementRef.nativeElement;\n        if (from == 'top') {\n            return el.scrollTop;\n        }\n        if (from == 'bottom') {\n            return el.scrollHeight - el.clientHeight - el.scrollTop;\n        }\n        // Rewrite start & end as left or right offsets.\n        /** @type {?} */\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        if (from == 'start') {\n            from = isRtl ? RIGHT : LEFT;\n        }\n        else if (from == 'end') {\n            from = isRtl ? LEFT : RIGHT;\n        }\n        if (isRtl && getRtlScrollAxisType() == 2 /* INVERTED */) {\n            // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n            else {\n                return el.scrollLeft;\n            }\n        }\n        else if (isRtl && getRtlScrollAxisType() == 1 /* NEGATED */) {\n            // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft + el.scrollWidth - el.clientWidth;\n            }\n            else {\n                return -el.scrollLeft;\n            }\n        }\n        else {\n            // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n            // (scrollWidth - clientWidth) when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft;\n            }\n            else {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n        }\n    }\n}\nCdkScrollable.ɵfac = function CdkScrollable_Factory(t) { return new (t || CdkScrollable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8)); };\nCdkScrollable.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkScrollable, selectors: [[\"\", \"cdk-scrollable\", \"\"], [\"\", \"cdkScrollable\", \"\"]] });\n/** @nocollapse */\nCdkScrollable.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: NgZone },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkScrollable, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-scrollable], [cdkScrollable]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ScrollDispatcher }, { type: ɵngcc0.NgZone }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkScrollable.prototype._destroyed;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkScrollable.prototype._elementScrolled;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkScrollable.prototype.elementRef;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkScrollable.prototype.scrollDispatcher;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkScrollable.prototype.ngZone;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkScrollable.prototype.dir;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/scrolling/viewport-ruler.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Time in ms to throttle the resize events by default.\n * @type {?}\n */\nconst DEFAULT_RESIZE_TIME = 20;\n/**\n * Object that holds the scroll position of the viewport in each direction.\n * @record\n */\nfunction ViewportScrollPosition() { }\nif (false) {\n    /** @type {?} */\n    ViewportScrollPosition.prototype.top;\n    /** @type {?} */\n    ViewportScrollPosition.prototype.left;\n}\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * \\@docs-private\n */\nclass ViewportRuler {\n    /**\n     * @param {?} _platform\n     * @param {?} ngZone\n     * @param {?=} document\n     */\n    constructor(_platform, ngZone, \n    /** @breaking-change 11.0.0 make document required */\n    document) {\n        this._platform = _platform;\n        this._document = document;\n        ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const window = this._getWindow();\n            this._change = _platform.isBrowser ?\n                merge(fromEvent(window, 'resize'), fromEvent(window, 'orientationchange')) :\n                of();\n            // Note that we need to do the subscription inside `runOutsideAngular`\n            // since subscribing is what causes the event listener to be added.\n            this._invalidateCache = this.change().subscribe((/**\n             * @return {?}\n             */\n            () => this._updateViewportSize()));\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._invalidateCache.unsubscribe();\n    }\n    /**\n     * Returns the viewport's width and height.\n     * @return {?}\n     */\n    getViewportSize() {\n        if (!this._viewportSize) {\n            this._updateViewportSize();\n        }\n        /** @type {?} */\n        const output = { width: this._viewportSize.width, height: this._viewportSize.height };\n        // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n        if (!this._platform.isBrowser) {\n            this._viewportSize = (/** @type {?} */ (null));\n        }\n        return output;\n    }\n    /**\n     * Gets a ClientRect for the viewport's bounds.\n     * @return {?}\n     */\n    getViewportRect() {\n        // Use the document element's bounding rect rather than the window scroll properties\n        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n        // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n        // can disagree when the page is pinch-zoomed (on devices that support touch).\n        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n        // We use the documentElement instead of the body because, by default (without a css reset)\n        // browsers typically give the document body an 8px margin, which is not included in\n        // getBoundingClientRect().\n        /** @type {?} */\n        const scrollPosition = this.getViewportScrollPosition();\n        const { width, height } = this.getViewportSize();\n        return {\n            top: scrollPosition.top,\n            left: scrollPosition.left,\n            bottom: scrollPosition.top + height,\n            right: scrollPosition.left + width,\n            height,\n            width,\n        };\n    }\n    /**\n     * Gets the (top, left) scroll position of the viewport.\n     * @return {?}\n     */\n    getViewportScrollPosition() {\n        // While we can get a reference to the fake document\n        // during SSR, it doesn't have getBoundingClientRect.\n        if (!this._platform.isBrowser) {\n            return { top: 0, left: 0 };\n        }\n        // The top-left-corner of the viewport is determined by the scroll position of the document\n        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n        // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n        // `document.documentElement` works consistently, where the `top` and `left` values will\n        // equal negative the scroll position.\n        /** @type {?} */\n        const document = this._getDocument();\n        /** @type {?} */\n        const window = this._getWindow();\n        /** @type {?} */\n        const documentElement = (/** @type {?} */ (document.documentElement));\n        /** @type {?} */\n        const documentRect = documentElement.getBoundingClientRect();\n        /** @type {?} */\n        const top = -documentRect.top || document.body.scrollTop || window.scrollY ||\n            documentElement.scrollTop || 0;\n        /** @type {?} */\n        const left = -documentRect.left || document.body.scrollLeft || window.scrollX ||\n            documentElement.scrollLeft || 0;\n        return { top, left };\n    }\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * @param {?=} throttleTime Time in milliseconds to throttle the stream.\n     * @return {?}\n     */\n    change(throttleTime = DEFAULT_RESIZE_TIME) {\n        return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    }\n    /**\n     * Access injected document if available or fallback to global document reference\n     * @private\n     * @return {?}\n     */\n    _getDocument() {\n        return this._document || document;\n    }\n    /**\n     * Use defaultView of injected document if available or fallback to global window reference\n     * @private\n     * @return {?}\n     */\n    _getWindow() {\n        /** @type {?} */\n        const doc = this._getDocument();\n        return doc.defaultView || window;\n    }\n    /**\n     * Updates the cached viewport size.\n     * @private\n     * @return {?}\n     */\n    _updateViewportSize() {\n        /** @type {?} */\n        const window = this._getWindow();\n        this._viewportSize = this._platform.isBrowser ?\n            { width: window.innerWidth, height: window.innerHeight } :\n            { width: 0, height: 0 };\n    }\n}\nViewportRuler.ɵfac = function ViewportRuler_Factory(t) { return new (t || ViewportRuler)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT, 8)); };\n/** @nocollapse */\nViewportRuler.ctorParameters = () => [\n    { type: Platform },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ ViewportRuler.ɵprov = ɵɵdefineInjectable({ factory: function ViewportRuler_Factory() { return new ViewportRuler(ɵɵinject(Platform), ɵɵinject(NgZone), ɵɵinject(DOCUMENT, 8)); }, token: ViewportRuler, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ViewportRuler, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\nif (false) {\n    /**\n     * Cached viewport dimensions.\n     * @type {?}\n     * @private\n     */\n    ViewportRuler.prototype._viewportSize;\n    /**\n     * Stream of viewport change events.\n     * @type {?}\n     * @private\n     */\n    ViewportRuler.prototype._change;\n    /**\n     * Subscription to streams that invalidate the cached viewport dimensions.\n     * @type {?}\n     * @private\n     */\n    ViewportRuler.prototype._invalidateCache;\n    /**\n     * Used to reference correct document/window\n     * @type {?}\n     * @protected\n     */\n    ViewportRuler.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    ViewportRuler.prototype._platform;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/scrolling/virtual-scroll-viewport.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Checks if the given ranges are equal.\n * @param {?} r1\n * @param {?} r2\n * @return {?}\n */\nfunction rangesEqual(r1, r2) {\n    return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n * @type {?}\n */\nconst SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n/**\n * A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`.\n */\nclass CdkVirtualScrollViewport extends CdkScrollable {\n    /**\n     * @param {?} elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} ngZone\n     * @param {?} _scrollStrategy\n     * @param {?} dir\n     * @param {?} scrollDispatcher\n     * @param {?=} viewportRuler\n     */\n    constructor(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher, \n    /**\n     * @deprecated `viewportRuler` parameter to become required.\n     * @breaking-change 11.0.0\n     */\n    viewportRuler) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n        this.elementRef = elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollStrategy = _scrollStrategy;\n        /**\n         * Emits when the viewport is detached from a CdkVirtualForOf.\n         */\n        this._detachedSubject = new Subject();\n        /**\n         * Emits when the rendered range changes.\n         */\n        this._renderedRangeSubject = new Subject();\n        this._orientation = 'vertical';\n        // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n        // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n        // depending on how the strategy calculates the scrolled index, it may come at a cost to\n        // performance.\n        /**\n         * Emits when the index of the first element visible in the viewport changes.\n         */\n        this.scrolledIndexChange = new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => this._scrollStrategy.scrolledIndexChange.subscribe((/**\n         * @param {?} index\n         * @return {?}\n         */\n        index => Promise.resolve().then((/**\n         * @return {?}\n         */\n        () => this.ngZone.run((/**\n         * @return {?}\n         */\n        () => observer.next(index)))))))));\n        /**\n         * A stream that emits whenever the rendered range changes.\n         */\n        this.renderedRangeStream = this._renderedRangeSubject.asObservable();\n        /**\n         * The total size of all content (in pixels), including content that is not currently rendered.\n         */\n        this._totalContentSize = 0;\n        /**\n         * A string representing the `style.width` property value to be used for the spacer element.\n         */\n        this._totalContentWidth = '';\n        /**\n         * A string representing the `style.height` property value to be used for the spacer element.\n         */\n        this._totalContentHeight = '';\n        /**\n         * The currently rendered range of indices.\n         */\n        this._renderedRange = { start: 0, end: 0 };\n        /**\n         * The length of the data bound to this viewport (in number of items).\n         */\n        this._dataLength = 0;\n        /**\n         * The size of the viewport (in pixels).\n         */\n        this._viewportSize = 0;\n        /**\n         * The last rendered content offset that was set.\n         */\n        this._renderedContentOffset = 0;\n        /**\n         * Whether the last rendered content offset was to the end of the content (and therefore needs to\n         * be rewritten as an offset to the start of the content).\n         */\n        this._renderedContentOffsetNeedsRewrite = false;\n        /**\n         * Whether there is a pending change detection cycle.\n         */\n        this._isChangeDetectionPending = false;\n        /**\n         * A list of functions to run after the next change detection cycle.\n         */\n        this._runAfterChangeDetection = [];\n        /**\n         * Subscription to changes in the viewport size.\n         */\n        this._viewportChanges = Subscription.EMPTY;\n        if (!_scrollStrategy) {\n            throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n        }\n        // @breaking-change 11.0.0 Remove null check for `viewportRuler`.\n        if (viewportRuler) {\n            this._viewportChanges = viewportRuler.change().subscribe((/**\n             * @return {?}\n             */\n            () => {\n                this.checkViewportSize();\n            }));\n        }\n    }\n    /**\n     * The direction the viewport scrolls.\n     * @return {?}\n     */\n    get orientation() {\n        return this._orientation;\n    }\n    /**\n     * @param {?} orientation\n     * @return {?}\n     */\n    set orientation(orientation) {\n        if (this._orientation !== orientation) {\n            this._orientation = orientation;\n            this._calculateSpacerSize();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        super.ngOnInit();\n        // It's still too early to measure the viewport at this point. Deferring with a promise allows\n        // the Viewport to be rendered with the correct size before we measure. We run this outside the\n        // zone to avoid causing more change detection cycles. We handle the change detection loop\n        // ourselves instead.\n        this.ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => Promise.resolve().then((/**\n         * @return {?}\n         */\n        () => {\n            this._measureViewportSize();\n            this._scrollStrategy.attach(this);\n            this.elementScrolled()\n                .pipe(\n            // Start off with a fake scroll event so we properly detect our initial position.\n            startWith((/** @type {?} */ (null))), \n            // Collect multiple events into one until the next animation frame. This way if\n            // there are multiple scroll events in the same frame we only need to recheck\n            // our layout once.\n            auditTime(0, SCROLL_SCHEDULER))\n                .subscribe((/**\n             * @return {?}\n             */\n            () => this._scrollStrategy.onContentScrolled()));\n            this._markChangeDetectionNeeded();\n        }))));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.detach();\n        this._scrollStrategy.detach();\n        // Complete all subjects\n        this._renderedRangeSubject.complete();\n        this._detachedSubject.complete();\n        this._viewportChanges.unsubscribe();\n        super.ngOnDestroy();\n    }\n    /**\n     * Attaches a `CdkVirtualForOf` to this viewport.\n     * @param {?} forOf\n     * @return {?}\n     */\n    attach(forOf) {\n        if (this._forOf) {\n            throw Error('CdkVirtualScrollViewport is already attached.');\n        }\n        // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n        // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n        // change detection loop ourselves.\n        this.ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            this._forOf = forOf;\n            this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe((/**\n             * @param {?} data\n             * @return {?}\n             */\n            data => {\n                /** @type {?} */\n                const newLength = data.length;\n                if (newLength !== this._dataLength) {\n                    this._dataLength = newLength;\n                    this._scrollStrategy.onDataLengthChanged();\n                }\n                this._doChangeDetection();\n            }));\n        }));\n    }\n    /**\n     * Detaches the current `CdkVirtualForOf`.\n     * @return {?}\n     */\n    detach() {\n        this._forOf = null;\n        this._detachedSubject.next();\n    }\n    /**\n     * Gets the length of the data bound to this viewport (in number of items).\n     * @return {?}\n     */\n    getDataLength() {\n        return this._dataLength;\n    }\n    /**\n     * Gets the size of the viewport (in pixels).\n     * @return {?}\n     */\n    getViewportSize() {\n        return this._viewportSize;\n    }\n    // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n    // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n    // setting it to something else, but its error prone and should probably be split into\n    // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n    /**\n     * Get the current rendered range of items.\n     * @return {?}\n     */\n    getRenderedRange() {\n        return this._renderedRange;\n    }\n    /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     * @param {?} size\n     * @return {?}\n     */\n    setTotalContentSize(size) {\n        if (this._totalContentSize !== size) {\n            this._totalContentSize = size;\n            this._calculateSpacerSize();\n            this._markChangeDetectionNeeded();\n        }\n    }\n    /**\n     * Sets the currently rendered range of indices.\n     * @param {?} range\n     * @return {?}\n     */\n    setRenderedRange(range) {\n        if (!rangesEqual(this._renderedRange, range)) {\n            this._renderedRangeSubject.next(this._renderedRange = range);\n            this._markChangeDetectionNeeded((/**\n             * @return {?}\n             */\n            () => this._scrollStrategy.onContentRendered()));\n        }\n    }\n    /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     * @return {?}\n     */\n    getOffsetToRenderedContentStart() {\n        return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n    }\n    /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     * @param {?} offset\n     * @param {?=} to\n     * @return {?}\n     */\n    setRenderedContentOffset(offset, to = 'to-start') {\n        // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n        // in the negative direction.\n        /** @type {?} */\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        /** @type {?} */\n        const isHorizontal = this.orientation == 'horizontal';\n        /** @type {?} */\n        const axis = isHorizontal ? 'X' : 'Y';\n        /** @type {?} */\n        const axisDirection = isHorizontal && isRtl ? -1 : 1;\n        /** @type {?} */\n        let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n        this._renderedContentOffset = offset;\n        if (to === 'to-end') {\n            transform += ` translate${axis}(-100%)`;\n            // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n            // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n            // expand upward).\n            this._renderedContentOffsetNeedsRewrite = true;\n        }\n        if (this._renderedContentTransform != transform) {\n            // We know this value is safe because we parse `offset` with `Number()` before passing it\n            // into the string.\n            this._renderedContentTransform = transform;\n            this._markChangeDetectionNeeded((/**\n             * @return {?}\n             */\n            () => {\n                if (this._renderedContentOffsetNeedsRewrite) {\n                    this._renderedContentOffset -= this.measureRenderedContentSize();\n                    this._renderedContentOffsetNeedsRewrite = false;\n                    this.setRenderedContentOffset(this._renderedContentOffset);\n                }\n                else {\n                    this._scrollStrategy.onRenderedOffsetChanged();\n                }\n            }));\n        }\n    }\n    /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param {?} offset The offset to scroll to.\n     * @param {?=} behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     * @return {?}\n     */\n    scrollToOffset(offset, behavior = 'auto') {\n        /** @type {?} */\n        const options = { behavior };\n        if (this.orientation === 'horizontal') {\n            options.start = offset;\n        }\n        else {\n            options.top = offset;\n        }\n        this.scrollTo(options);\n    }\n    /**\n     * Scrolls to the offset for the given index.\n     * @param {?} index The index of the element to scroll to.\n     * @param {?=} behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     * @return {?}\n     */\n    scrollToIndex(index, behavior = 'auto') {\n        this._scrollStrategy.scrollToIndex(index, behavior);\n    }\n    /**\n     * Gets the current scroll offset from the start of the viewport (in pixels).\n     * @param {?=} from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     * @return {?}\n     */\n    measureScrollOffset(from) {\n        return from ?\n            super.measureScrollOffset(from) :\n            super.measureScrollOffset(this.orientation === 'horizontal' ? 'start' : 'top');\n    }\n    /**\n     * Measure the combined size of all of the rendered items.\n     * @return {?}\n     */\n    measureRenderedContentSize() {\n        /** @type {?} */\n        const contentEl = this._contentWrapper.nativeElement;\n        return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n    }\n    /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     * @param {?} range\n     * @return {?}\n     */\n    measureRangeSize(range) {\n        if (!this._forOf) {\n            return 0;\n        }\n        return this._forOf.measureRangeSize(range, this.orientation);\n    }\n    /**\n     * Update the viewport dimensions and re-render.\n     * @return {?}\n     */\n    checkViewportSize() {\n        // TODO: Cleanup later when add logic for handling content resize\n        this._measureViewportSize();\n        this._scrollStrategy.onDataLengthChanged();\n    }\n    /**\n     * Measure the viewport size.\n     * @private\n     * @return {?}\n     */\n    _measureViewportSize() {\n        /** @type {?} */\n        const viewportEl = this.elementRef.nativeElement;\n        this._viewportSize = this.orientation === 'horizontal' ?\n            viewportEl.clientWidth : viewportEl.clientHeight;\n    }\n    /**\n     * Queue up change detection to run.\n     * @private\n     * @param {?=} runAfter\n     * @return {?}\n     */\n    _markChangeDetectionNeeded(runAfter) {\n        if (runAfter) {\n            this._runAfterChangeDetection.push(runAfter);\n        }\n        // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n        // properties sequentially we only have to run `_doChangeDetection` once at the end.\n        if (!this._isChangeDetectionPending) {\n            this._isChangeDetectionPending = true;\n            this.ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => Promise.resolve().then((/**\n             * @return {?}\n             */\n            () => {\n                this._doChangeDetection();\n            }))));\n        }\n    }\n    /**\n     * Run change detection.\n     * @private\n     * @return {?}\n     */\n    _doChangeDetection() {\n        this._isChangeDetectionPending = false;\n        // Apply the content transform. The transform can't be set via an Angular binding because\n        // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n        // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n        // the `Number` function first to coerce it to a numeric value.\n        this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n        // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n        // from the root, since the repeated items are content projected in. Calling `detectChanges`\n        // instead does not properly check the projected content.\n        this.ngZone.run((/**\n         * @return {?}\n         */\n        () => this._changeDetectorRef.markForCheck()));\n        /** @type {?} */\n        const runAfterChangeDetection = this._runAfterChangeDetection;\n        this._runAfterChangeDetection = [];\n        for (const fn of runAfterChangeDetection) {\n            fn();\n        }\n    }\n    /**\n     * Calculates the `style.width` and `style.height` for the spacer element.\n     * @private\n     * @return {?}\n     */\n    _calculateSpacerSize() {\n        this._totalContentHeight =\n            this.orientation === 'horizontal' ? '' : `${this._totalContentSize}px`;\n        this._totalContentWidth =\n            this.orientation === 'horizontal' ? `${this._totalContentSize}px` : '';\n    }\n}\nCdkVirtualScrollViewport.ɵfac = function CdkVirtualScrollViewport_Factory(t) { return new (t || CdkVirtualScrollViewport)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(VIRTUAL_SCROLL_STRATEGY, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ViewportRuler, 8)); };\nCdkVirtualScrollViewport.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CdkVirtualScrollViewport, selectors: [[\"cdk-virtual-scroll-viewport\"]], viewQuery: function CdkVirtualScrollViewport_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(_c0, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentWrapper = _t.first);\n    } }, hostAttrs: [1, \"cdk-virtual-scroll-viewport\"], hostVars: 4, hostBindings: function CdkVirtualScrollViewport_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"cdk-virtual-scroll-orientation-horizontal\", ctx.orientation === \"horizontal\")(\"cdk-virtual-scroll-orientation-vertical\", ctx.orientation !== \"horizontal\");\n    } }, inputs: { orientation: \"orientation\" }, outputs: { scrolledIndexChange: \"scrolledIndexChange\" }, features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: CdkScrollable,\n                useExisting: CdkVirtualScrollViewport\n            }]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 4, vars: 4, consts: [[1, \"cdk-virtual-scroll-content-wrapper\"], [\"contentWrapper\", \"\"], [1, \"cdk-virtual-scroll-spacer\"]], template: function CdkVirtualScrollViewport_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(3, \"div\", 2);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx._totalContentWidth)(\"height\", ctx._totalContentHeight);\n    } }, styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\\n\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nCdkVirtualScrollViewport.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [VIRTUAL_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: ScrollDispatcher },\n    { type: ViewportRuler, decorators: [{ type: Optional }] }\n];\nCdkVirtualScrollViewport.propDecorators = {\n    orientation: [{ type: Input }],\n    scrolledIndexChange: [{ type: Output }],\n    _contentWrapper: [{ type: ViewChild, args: ['contentWrapper', { static: true },] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkVirtualScrollViewport, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-virtual-scroll-viewport',\n                template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\",\n                host: {\n                    'class': 'cdk-virtual-scroll-viewport',\n                    '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n                    '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"'\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                providers: [{\n                        provide: CdkScrollable,\n                        useExisting: CdkVirtualScrollViewport\n                    }],\n                styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [VIRTUAL_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ScrollDispatcher }, { type: ViewportRuler, decorators: [{\n                type: Optional\n            }] }]; }, { scrolledIndexChange: [{\n            type: Output\n        }], orientation: [{\n            type: Input\n        }], _contentWrapper: [{\n            type: ViewChild,\n            args: ['contentWrapper', { static: true }]\n        }] }); })();\nif (false) {\n    /**\n     * Emits when the viewport is detached from a CdkVirtualForOf.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._detachedSubject;\n    /**\n     * Emits when the rendered range changes.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._renderedRangeSubject;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._orientation;\n    /**\n     * Emits when the index of the first element visible in the viewport changes.\n     * @type {?}\n     */\n    CdkVirtualScrollViewport.prototype.scrolledIndexChange;\n    /**\n     * The element that wraps the rendered content.\n     * @type {?}\n     */\n    CdkVirtualScrollViewport.prototype._contentWrapper;\n    /**\n     * A stream that emits whenever the rendered range changes.\n     * @type {?}\n     */\n    CdkVirtualScrollViewport.prototype.renderedRangeStream;\n    /**\n     * The total size of all content (in pixels), including content that is not currently rendered.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._totalContentSize;\n    /**\n     * A string representing the `style.width` property value to be used for the spacer element.\n     * @type {?}\n     */\n    CdkVirtualScrollViewport.prototype._totalContentWidth;\n    /**\n     * A string representing the `style.height` property value to be used for the spacer element.\n     * @type {?}\n     */\n    CdkVirtualScrollViewport.prototype._totalContentHeight;\n    /**\n     * The CSS transform applied to the rendered subset of items so that they appear within the bounds\n     * of the visible viewport.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._renderedContentTransform;\n    /**\n     * The currently rendered range of indices.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._renderedRange;\n    /**\n     * The length of the data bound to this viewport (in number of items).\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._dataLength;\n    /**\n     * The size of the viewport (in pixels).\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._viewportSize;\n    /**\n     * the currently attached CdkVirtualForOf.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._forOf;\n    /**\n     * The last rendered content offset that was set.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._renderedContentOffset;\n    /**\n     * Whether the last rendered content offset was to the end of the content (and therefore needs to\n     * be rewritten as an offset to the start of the content).\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._renderedContentOffsetNeedsRewrite;\n    /**\n     * Whether there is a pending change detection cycle.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._isChangeDetectionPending;\n    /**\n     * A list of functions to run after the next change detection cycle.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._runAfterChangeDetection;\n    /**\n     * Subscription to changes in the viewport size.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._viewportChanges;\n    /** @type {?} */\n    CdkVirtualScrollViewport.prototype.elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._scrollStrategy;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/scrolling/virtual-for-of.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Helper to extract size from a DOM Node.\n * @param {?} orientation\n * @param {?} node\n * @return {?}\n */\nfunction getSize(orientation, node) {\n    /** @type {?} */\n    const el = (/** @type {?} */ (node));\n    if (!el.getBoundingClientRect) {\n        return 0;\n    }\n    /** @type {?} */\n    const rect = el.getBoundingClientRect();\n    return orientation == 'horizontal' ? rect.width : rect.height;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n * @template T\n */\nclass CdkVirtualForOf {\n    /**\n     * @param {?} _viewContainerRef\n     * @param {?} _template\n     * @param {?} _differs\n     * @param {?} _viewport\n     * @param {?} ngZone\n     */\n    constructor(_viewContainerRef, _template, _differs, _viewport, ngZone) {\n        this._viewContainerRef = _viewContainerRef;\n        this._template = _template;\n        this._differs = _differs;\n        this._viewport = _viewport;\n        /**\n         * Emits when the rendered view of the data changes.\n         */\n        this.viewChange = new Subject();\n        /**\n         * Subject that emits when a new DataSource instance is given.\n         */\n        this._dataSourceChanges = new Subject();\n        /**\n         * The size of the cache used to store templates that are not being used for re-use later.\n         * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n         */\n        this.cdkVirtualForTemplateCacheSize = 20;\n        /**\n         * Emits whenever the data in the current DataSource changes.\n         */\n        this.dataStream = this._dataSourceChanges\n            .pipe(\n        // Start off with null `DataSource`.\n        startWith((/** @type {?} */ (null))), \n        // Bundle up the previous and current data sources so we can work with both.\n        pairwise(), \n        // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n        // new one, passing back a stream of data changes which we run through `switchMap` to give\n        // us a data stream that emits the latest data from whatever the current `DataSource` is.\n        switchMap((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ([prev, cur]) => this._changeDataSource(prev, cur))), \n        // Replay the last emitted data when someone subscribes.\n        shareReplay(1));\n        /**\n         * The differ used to calculate changes to the data.\n         */\n        this._differ = null;\n        /**\n         * The template cache used to hold on ot template instancess that have been stamped out, but don't\n         * currently need to be rendered. These instances will be reused in the future rather than\n         * stamping out brand new ones.\n         */\n        this._templateCache = [];\n        /**\n         * Whether the rendered data should be updated during the next ngDoCheck cycle.\n         */\n        this._needsUpdate = false;\n        this._destroyed = new Subject();\n        this.dataStream.subscribe((/**\n         * @param {?} data\n         * @return {?}\n         */\n        data => {\n            this._data = data;\n            this._onRenderedDataChange();\n        }));\n        this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe((/**\n         * @param {?} range\n         * @return {?}\n         */\n        range => {\n            this._renderedRange = range;\n            ngZone.run((/**\n             * @return {?}\n             */\n            () => this.viewChange.next(this._renderedRange)));\n            this._onRenderedDataChange();\n        }));\n        this._viewport.attach(this);\n    }\n    /**\n     * The DataSource to display.\n     * @return {?}\n     */\n    get cdkVirtualForOf() {\n        return this._cdkVirtualForOf;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set cdkVirtualForOf(value) {\n        this._cdkVirtualForOf = value;\n        if (isDataSource(value)) {\n            this._dataSourceChanges.next(value);\n        }\n        else {\n            // Slice the value if its an NgIterable to ensure we're working with an array.\n            this._dataSourceChanges.next(new ArrayDataSource(isObservable(value) ? value : Array.prototype.slice.call(value || [])));\n        }\n    }\n    /**\n     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n     * the item and produces a value to be used as the item's identity when tracking changes.\n     * @return {?}\n     */\n    get cdkVirtualForTrackBy() {\n        return this._cdkVirtualForTrackBy;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    set cdkVirtualForTrackBy(fn) {\n        this._needsUpdate = true;\n        this._cdkVirtualForTrackBy = fn ?\n            (/**\n             * @param {?} index\n             * @param {?} item\n             * @return {?}\n             */\n            (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item)) :\n            undefined;\n    }\n    /**\n     * The template used to stamp out new elements.\n     * @param {?} value\n     * @return {?}\n     */\n    set cdkVirtualForTemplate(value) {\n        if (value) {\n            this._needsUpdate = true;\n            this._template = value;\n        }\n    }\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     * @param {?} range\n     * @param {?} orientation\n     * @return {?}\n     */\n    measureRangeSize(range, orientation) {\n        if (range.start >= range.end) {\n            return 0;\n        }\n        if (range.start < this._renderedRange.start || range.end > this._renderedRange.end) {\n            throw Error(`Error: attempted to measure an item that isn't rendered.`);\n        }\n        // The index into the list of rendered views for the first item in the range.\n        /** @type {?} */\n        const renderedStartIndex = range.start - this._renderedRange.start;\n        // The length of the range we're measuring.\n        /** @type {?} */\n        const rangeLen = range.end - range.start;\n        // Loop over all root nodes for all items in the range and sum up their size.\n        /** @type {?} */\n        let totalSize = 0;\n        /** @type {?} */\n        let i = rangeLen;\n        while (i--) {\n            /** @type {?} */\n            const view = (/** @type {?} */ (this._viewContainerRef.get(i + renderedStartIndex)));\n            /** @type {?} */\n            let j = view ? view.rootNodes.length : 0;\n            while (j--) {\n                totalSize += getSize(orientation, (/** @type {?} */ (view)).rootNodes[j]);\n            }\n        }\n        return totalSize;\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this._differ && this._needsUpdate) {\n            // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n            // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n            // changing (need to do this diff).\n            /** @type {?} */\n            const changes = this._differ.diff(this._renderedItems);\n            if (!changes) {\n                this._updateContext();\n            }\n            else {\n                this._applyChanges(changes);\n            }\n            this._needsUpdate = false;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._viewport.detach();\n        this._dataSourceChanges.next();\n        this._dataSourceChanges.complete();\n        this.viewChange.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n        for (let view of this._templateCache) {\n            view.destroy();\n        }\n    }\n    /**\n     * React to scroll state changes in the viewport.\n     * @private\n     * @return {?}\n     */\n    _onRenderedDataChange() {\n        if (!this._renderedRange) {\n            return;\n        }\n        this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n        if (!this._differ) {\n            this._differ = this._differs.find(this._renderedItems).create(this.cdkVirtualForTrackBy);\n        }\n        this._needsUpdate = true;\n    }\n    /**\n     * Swap out one `DataSource` for another.\n     * @private\n     * @param {?} oldDs\n     * @param {?} newDs\n     * @return {?}\n     */\n    _changeDataSource(oldDs, newDs) {\n        if (oldDs) {\n            oldDs.disconnect(this);\n        }\n        this._needsUpdate = true;\n        return newDs ? newDs.connect(this) : of();\n    }\n    /**\n     * Update the `CdkVirtualForOfContext` for all views.\n     * @private\n     * @return {?}\n     */\n    _updateContext() {\n        /** @type {?} */\n        const count = this._data.length;\n        /** @type {?} */\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            /** @type {?} */\n            let view = (/** @type {?} */ (this._viewContainerRef.get(i)));\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n            view.detectChanges();\n        }\n    }\n    /**\n     * Apply changes to the DOM.\n     * @private\n     * @param {?} changes\n     * @return {?}\n     */\n    _applyChanges(changes) {\n        // Rearrange the views to put them in the right location.\n        changes.forEachOperation((/**\n         * @param {?} record\n         * @param {?} adjustedPreviousIndex\n         * @param {?} currentIndex\n         * @return {?}\n         */\n        (record, adjustedPreviousIndex, currentIndex) => {\n            if (record.previousIndex == null) { // Item added.\n                // Item added.\n                /** @type {?} */\n                const view = this._insertViewForNewItem((/** @type {?} */ (currentIndex)));\n                view.context.$implicit = record.item;\n            }\n            else if (currentIndex == null) { // Item removed.\n                this._cacheView(this._detachView((/** @type {?} */ (adjustedPreviousIndex))));\n            }\n            else { // Item moved.\n                // Item moved.\n                /** @type {?} */\n                const view = (/** @type {?} */ (this._viewContainerRef.get((/** @type {?} */ (adjustedPreviousIndex)))));\n                this._viewContainerRef.move(view, currentIndex);\n                view.context.$implicit = record.item;\n            }\n        }));\n        // Update $implicit for any items that had an identity change.\n        changes.forEachIdentityChange((/**\n         * @param {?} record\n         * @return {?}\n         */\n        (record) => {\n            /** @type {?} */\n            const view = (/** @type {?} */ (this._viewContainerRef.get((/** @type {?} */ (record.currentIndex)))));\n            view.context.$implicit = record.item;\n        }));\n        // Update the context variables on all items.\n        /** @type {?} */\n        const count = this._data.length;\n        /** @type {?} */\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            /** @type {?} */\n            const view = (/** @type {?} */ (this._viewContainerRef.get(i)));\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n        }\n    }\n    /**\n     * Cache the given detached view.\n     * @private\n     * @param {?} view\n     * @return {?}\n     */\n    _cacheView(view) {\n        if (this._templateCache.length < this.cdkVirtualForTemplateCacheSize) {\n            this._templateCache.push(view);\n        }\n        else {\n            /** @type {?} */\n            const index = this._viewContainerRef.indexOf(view);\n            // It's very unlikely that the index will ever be -1, but just in case,\n            // destroy the view on its own, otherwise destroy it through the\n            // container to ensure that all the references are removed.\n            if (index === -1) {\n                view.destroy();\n            }\n            else {\n                this._viewContainerRef.remove(index);\n            }\n        }\n    }\n    /**\n     * Inserts a view for a new item, either from the cache or by creating a new one.\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    _insertViewForNewItem(index) {\n        return this._insertViewFromCache(index) || this._createEmbeddedViewAt(index);\n    }\n    /**\n     * Update the computed properties on the `CdkVirtualForOfContext`.\n     * @private\n     * @param {?} context\n     * @return {?}\n     */\n    _updateComputedContextProperties(context) {\n        context.first = context.index === 0;\n        context.last = context.index === context.count - 1;\n        context.even = context.index % 2 === 0;\n        context.odd = !context.even;\n    }\n    /**\n     * Creates a new embedded view and moves it to the given index\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    _createEmbeddedViewAt(index) {\n        // Note that it's important that we insert the item directly at the proper index,\n        // rather than inserting it and the moving it in place, because if there's a directive\n        // on the same node that injects the `ViewContainerRef`, Angular will insert another\n        // comment node which can throw off the move when it's being repeated for all items.\n        return this._viewContainerRef.createEmbeddedView(this._template, {\n            $implicit: (/** @type {?} */ (null)),\n            // It's guaranteed that the iterable is not \"undefined\" or \"null\" because we only\n            // generate views for elements if the \"cdkVirtualForOf\" iterable has elements.\n            cdkVirtualForOf: (/** @type {?} */ (this._cdkVirtualForOf)),\n            index: -1,\n            count: -1,\n            first: false,\n            last: false,\n            odd: false,\n            even: false\n        }, index);\n    }\n    /**\n     * Inserts a recycled view from the cache at the given index.\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    _insertViewFromCache(index) {\n        /** @type {?} */\n        const cachedView = this._templateCache.pop();\n        if (cachedView) {\n            this._viewContainerRef.insert(cachedView, index);\n        }\n        return cachedView || null;\n    }\n    /**\n     * Detaches the embedded view at the given index.\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    _detachView(index) {\n        return (/** @type {?} */ (this._viewContainerRef.detach(index)));\n    }\n}\nCdkVirtualForOf.ɵfac = function CdkVirtualForOf_Factory(t) { return new (t || CdkVirtualForOf)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CdkVirtualScrollViewport, 4), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nCdkVirtualForOf.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkVirtualForOf, selectors: [[\"\", \"cdkVirtualFor\", \"\", \"cdkVirtualForOf\", \"\"]], inputs: { cdkVirtualForTemplateCacheSize: \"cdkVirtualForTemplateCacheSize\", cdkVirtualForOf: \"cdkVirtualForOf\", cdkVirtualForTrackBy: \"cdkVirtualForTrackBy\", cdkVirtualForTemplate: \"cdkVirtualForTemplate\" } });\n/** @nocollapse */\nCdkVirtualForOf.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: TemplateRef },\n    { type: IterableDiffers },\n    { type: CdkVirtualScrollViewport, decorators: [{ type: SkipSelf }] },\n    { type: NgZone }\n];\nCdkVirtualForOf.propDecorators = {\n    cdkVirtualForOf: [{ type: Input }],\n    cdkVirtualForTrackBy: [{ type: Input }],\n    cdkVirtualForTemplate: [{ type: Input }],\n    cdkVirtualForTemplateCacheSize: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkVirtualForOf, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkVirtualFor][cdkVirtualForOf]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }, { type: CdkVirtualScrollViewport, decorators: [{\n                type: SkipSelf\n            }] }, { type: ɵngcc0.NgZone }]; }, { cdkVirtualForTemplateCacheSize: [{\n            type: Input\n        }], cdkVirtualForOf: [{\n            type: Input\n        }], cdkVirtualForTrackBy: [{\n            type: Input\n        }], cdkVirtualForTemplate: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /**\n     * Emits when the rendered view of the data changes.\n     * @type {?}\n     */\n    CdkVirtualForOf.prototype.viewChange;\n    /**\n     * Subject that emits when a new DataSource instance is given.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualForOf.prototype._dataSourceChanges;\n    /** @type {?} */\n    CdkVirtualForOf.prototype._cdkVirtualForOf;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkVirtualForOf.prototype._cdkVirtualForTrackBy;\n    /**\n     * The size of the cache used to store templates that are not being used for re-use later.\n     * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n     * @type {?}\n     */\n    CdkVirtualForOf.prototype.cdkVirtualForTemplateCacheSize;\n    /**\n     * Emits whenever the data in the current DataSource changes.\n     * @type {?}\n     */\n    CdkVirtualForOf.prototype.dataStream;\n    /**\n     * The differ used to calculate changes to the data.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualForOf.prototype._differ;\n    /**\n     * The most recent data emitted from the DataSource.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualForOf.prototype._data;\n    /**\n     * The currently rendered items.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualForOf.prototype._renderedItems;\n    /**\n     * The currently rendered range of indices.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualForOf.prototype._renderedRange;\n    /**\n     * The template cache used to hold on ot template instancess that have been stamped out, but don't\n     * currently need to be rendered. These instances will be reused in the future rather than\n     * stamping out brand new ones.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualForOf.prototype._templateCache;\n    /**\n     * Whether the rendered data should be updated during the next ngDoCheck cycle.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualForOf.prototype._needsUpdate;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkVirtualForOf.prototype._destroyed;\n    /**\n     * The view container to add items to.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualForOf.prototype._viewContainerRef;\n    /**\n     * The template to use when stamping out new items.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualForOf.prototype._template;\n    /**\n     * The set of available differs.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualForOf.prototype._differs;\n    /**\n     * The virtual scrolling viewport that these items are being rendered in.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualForOf.prototype._viewport;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/scrolling/scrolling-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CdkScrollableModule {\n}\nCdkScrollableModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: CdkScrollableModule });\nCdkScrollableModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function CdkScrollableModule_Factory(t) { return new (t || CdkScrollableModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkScrollableModule, { declarations: [CdkScrollable], exports: [CdkScrollable] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkScrollableModule, [{\n        type: NgModule,\n        args: [{\n                exports: [CdkScrollable],\n                declarations: [CdkScrollable]\n            }]\n    }], null, null); })();\nclass ScrollingModule {\n}\nScrollingModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ScrollingModule });\nScrollingModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ScrollingModule_Factory(t) { return new (t || ScrollingModule)(); }, imports: [[\n            BidiModule,\n            PlatformModule,\n            CdkScrollableModule\n        ], BidiModule, CdkScrollableModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ScrollingModule, { declarations: function () { return [CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport]; }, imports: function () { return [BidiModule,\n        PlatformModule, CdkScrollableModule]; }, exports: function () { return [BidiModule, CdkScrollableModule, CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ScrollingModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    BidiModule,\n                    PlatformModule,\n                    CdkScrollableModule\n                ],\n                exports: [\n                    BidiModule,\n                    CdkScrollableModule,\n                    CdkFixedSizeVirtualScroll,\n                    CdkVirtualForOf,\n                    CdkVirtualScrollViewport,\n                ],\n                declarations: [\n                    CdkFixedSizeVirtualScroll,\n                    CdkVirtualForOf,\n                    CdkVirtualScrollViewport,\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/scrolling/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkFixedSizeVirtualScroll, CdkScrollable, CdkScrollableModule, CdkVirtualForOf, CdkVirtualScrollViewport, DEFAULT_RESIZE_TIME, DEFAULT_SCROLL_TIME, FixedSizeVirtualScrollStrategy, ScrollDispatcher, ScrollingModule, VIRTUAL_SCROLL_STRATEGY, ViewportRuler, _fixedSizeVirtualScrollStrategyFactory };\n\n//# sourceMappingURL=scrolling.js.map"]}