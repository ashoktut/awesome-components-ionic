{"version":3,"sources":["webpack:///src/app/directives/social-gestures/social-gestures.directive.ts","webpack:///src/app/pages/samples/components/gestures/touch-swipe/touch-swipe-routing.module.ts","webpack:///src/app/pages/samples/components/gestures/touch-swipe/touch-swipe.module.ts","webpack:///src/app/pages/samples/components/gestures/touch-swipe/touch-swipe.page.ts","webpack:///src/app/pages/samples/components/gestures/touch-swipe/touch-swipe.page.html"],"names":["SocialGestureDirective","gestureCtrl","el","debugMode","tap","doubleTap","press","swipe","swipeEnd","tapGesture","name","enabled","interval","doubleTapGesture","pressGesture","swipeGesture","threshold","reportInterval","undefined","direction","DIRECTIVE_GESTURES","GESTURE_CREATED","lastTap","tapCount","tapTimeout","pressTimeout","isPressing","moveTimeout","isMoving","lastSwipeReport","initSetupGestures","touch","handlePressing","type","e","tapTimestamp","Math","floor","timeStamp","isDoubleTap","resetTaps","emitTaps","setTimeout","filter","dGesture","gestureOpts","find","gestureOpt","createGesture","moveType","$event","clearTimeout","deltaX","deltaY","absDeltaX","abs","absDeltaY","reportItvl","shouldReport","emitObj","dirX","dirY","swipeType","dirArray","includes","console","log","emit","gesture","create","gestureName","nativeElement","onStart","setInterval","onMove","handleMoving","onEnd","enable","selector","routes","path","component","TouchSwipePageRoutingModule","forChild","imports","exports","TouchSwipePageModule","declarations","TouchSwipePage","toastController","gestureOptsTap","gestureOptsPress","gestureOptsSwipe","presentToast","msgm","message","duration","toast","present","onTap","onDoubleTap","onPress","onSwipe","onMoveed","templateUrl","styleUrls"],"mappings":"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","file":"touch-swipe-touch-swipe-module-es5.js","sourcesContent":["/**\n * By\n * https://medium.com/@JordanBenge/ionic-4-gestures-made-easy-5ce30aa82b7b\n */\n\nimport { Directive, ElementRef, EventEmitter, HostListener, Input, OnInit, Output } from '@angular/core';\nimport { GestureController } from '@ionic/angular';\n\nexport type gestureNames = 'tap' | 'doubleTap' | 'press' | 'swipe';\n\nexport type directionNames = 'up' | 'down' | 'left' | 'right';\n\nexport type reportInterval = 'start' | 'live' | 'end';\n\nexport interface Gesture {\n  name: gestureNames; // The gestureName that you want to use. Defined above.\n  interval?: number; // Maximum time in ms between multiple taps\n  enabled?: boolean; // Whether the gesture is enabled or not.\n  direction?: directionNames[]; // Direction - used to Swipe\n  threshold?: number; // the minimum distance before reporting a swipe.\n  reportInterval?: reportInterval;\n}\n\n/**\n * In component.ts\n *\n * gestureOpts: Gesture[] = [\n * {name: 'tap'},\n * {name: 'doubleTap'},\n * {name: 'press'},\n * {name: 'swipe'},\n *  ];\n */\n\n/**\n * In component.html\n *\n * < ion-card\n * appSocialGestures\n * [gestureOpts]=\"gestureOpts\"\n * (tap)=\"onTap($event) \"\n * (doubleTap)=\"onDoubleTap($event) \"\n * (press)=\"onPress($event)\"\n * (swipe)=\"onSwipe($event)\"\n * (swipeEnd)=\"onMoveed($event)\"\n * > ... </ ion-card\n */\n\n@Directive({\n  selector: '[appSocialGestures]',\n})\n\nexport class SocialGestureDirective implements OnInit {\n\n  @Input() gestureOpts: Gesture[];\n  @Input() debugMode = false;\n\n\n  // Events we can listen to.\n  @Output() tap = new EventEmitter();\n  @Output() doubleTap = new EventEmitter();\n  @Output() press = new EventEmitter();\n  @Output() swipe = new EventEmitter();\n  @Output() swipeEnd = new EventEmitter();\n\n  tapGesture: Gesture = {\n    name: 'tap',\n    enabled: false,\n    interval: 250,\n  };\n  doubleTapGesture: Gesture = {\n    name: 'doubleTap',\n    enabled: false,\n    interval: 300,\n  };\n  pressGesture: Gesture = {\n    name: 'press',\n    enabled: false,\n    interval: 251,\n\n  };\n  swipeGesture: Gesture = {\n    name: 'swipe',\n    enabled: false,\n    interval: 250,\n    threshold: 15,\n    reportInterval: undefined,\n    direction: ['right', 'left'],\n  };\n  DIRECTIVE_GESTURES = [this.tapGesture, this.doubleTapGesture, this.pressGesture, this.swipeGesture];\n  GESTURE_CREATED = false;\n  lastTap = 0;\n  tapCount = 0;\n  tapTimeout = null;\n  pressTimeout = null;\n  isPressing: boolean = false;\n  moveTimeout = null;\n  isMoving: boolean = false;\n  lastSwipeReport = null;\n\n  constructor(private gestureCtrl: GestureController, private el: ElementRef) { }\n\n  ngOnInit() {\n    this.initSetupGestures();\n  }\n\n  @HostListener('touchstart', ['$event'])\n  @HostListener('touchend', ['$event'])\n  onPress(touch: TouchEvent) {\n    if (!this.pressGesture.enabled) {\n      return;\n    } // Press is not enabled, don't do anything.\n    this.handlePressing(touch.type);\n  }\n\n  @HostListener('click', ['$event'])\n  handleTaps(e: MouseEvent) {\n    const tapTimestamp = Math.floor(e.timeStamp);\n    const isDoubleTap = this.lastTap + this.tapGesture.interval > tapTimestamp;\n    if ((!this.tapGesture.enabled && !this.doubleTapGesture.enabled) || this.isPressing || this.isMoving) {\n      return this.resetTaps();\n    }\n    this.tapCount++;\n    if (isDoubleTap && this.doubleTapGesture.enabled) {\n      this.emitTaps();\n    } else if (!isDoubleTap) {\n      this.tapTimeout = setTimeout(() => this.emitTaps(), this.tapGesture.interval);\n    }\n    this.lastTap = tapTimestamp;\n  }\n\n  /**\n   * This will setup the gestures that the user has provided in their Gesture Options.\n   */\n  private initSetupGestures() {\n    this.DIRECTIVE_GESTURES.filter((dGesture: Gesture) => {\n      this.gestureOpts.find((gestureOpt: Gesture) => {\n        if (dGesture.name === gestureOpt.name) {\n          // get values gestureOpts param\n          dGesture.enabled = true;\n\n          if (dGesture.name === 'swipe') {\n            this.swipeGesture.reportInterval = gestureOpt.reportInterval || dGesture.reportInterval;\n            this.swipeGesture.direction = gestureOpt.direction || dGesture.direction;\n            this.createGesture();\n          } else {\n            dGesture.interval = gestureOpt.interval || dGesture.interval;\n            dGesture.threshold = gestureOpt.threshold || dGesture.threshold;\n          }\n        }\n      });\n    });\n  }\n\n  private handleMoving(moveType: string, $event: any) {\n    if (this.moveTimeout !== null) {\n      clearTimeout(this.moveTimeout);\n      this.moveTimeout = null;\n    }\n    const deltaX = $event.deltaX;\n    const deltaY = $event.deltaY;\n    const absDeltaX = Math.abs(deltaX);\n    const absDeltaY = Math.abs(deltaY);\n    const reportItvl = this.swipeGesture.reportInterval || 'live';\n    const threshold = this.swipeGesture.threshold;\n    if (absDeltaX < threshold && absDeltaY < threshold) {  // We haven't moved enough to consider it a swipe.\n      return;\n    }\n    const shouldReport = this.isMoving &&\n      (\n        (reportItvl === 'start' && this.lastSwipeReport === null) ||\n        (reportItvl === 'live') ||\n        (reportItvl === 'end' && moveType === 'moveend')\n      );\n    this.lastSwipeReport = $event.timeStamp;\n    if (shouldReport) {\n      const emitObj = {\n        dirX: undefined,\n        dirY: undefined,\n        swipeType: moveType,\n        ...$event,\n      };\n      if (absDeltaX > threshold) {\n        if (deltaX > 0) {\n          emitObj.dirX = 'right';\n        } else if (deltaX < 0) {\n          emitObj.dirX = 'left';\n        }\n      }\n      if (absDeltaY > threshold) {\n        if (deltaY > 0) {\n          emitObj.dirY = 'down';\n        } else if (deltaY < 0) {\n          emitObj.dirY = 'up';\n        }\n      }\n      const dirArray = this.swipeGesture.direction;\n      if (dirArray.includes(emitObj.dirX) || dirArray.includes(emitObj.dirY)) {\n\n        if (this.debugMode) {\n          console.log(`Swipe`);\n        }\n        this.swipe.emit(emitObj);\n      }\n    }\n    if ((moveType === 'moveend' && this.lastSwipeReport !== null)) {\n      this.isMoving = false;\n      this.lastSwipeReport = null;\n      this.swipeEnd.emit();\n\n    }\n  }\n\n  /**\n   * Touch event\n   * @param type touchend or touchstart\n   */\n  private handlePressing(type: string) {\n    if (type === 'touchstart') {\n      this.pressTimeout = setTimeout(() => {\n        this.isPressing = true;\n        if (this.debugMode) {\n          console.log('PressStart');\n        }\n        this.press.emit('start');\n\n      }, this.pressGesture.interval); // Considered a press if it's longer than interval (default: 251).\n    } else if (type === 'touchend') {\n      clearTimeout(this.pressTimeout);\n      if (this.isPressing) {\n        if (this.debugMode) {\n          console.log('PressEnd');\n        }\n        this.press.emit('end');\n        this.resetTaps(); // Just incase this gets passed as a tap event too.\n      }\n      // Clicks have a natural delay of 300ms, so we have to account for that, before resetting isPressing.\n      // Otherwise a tap event is emitted.\n      setTimeout(() => this.isPressing = false, 150);\n    }\n  }\n\n  /**\n   * Observe element gestures\n   */\n  private createGesture() {\n    if (this.GESTURE_CREATED) {\n      return;\n    }\n    const gesture = this.gestureCtrl.create({\n      gestureName: 'socialGesture',\n      el: this.el.nativeElement,\n      onStart: () => {\n        if (this.swipeGesture.enabled) {\n          this.isMoving = true;\n          this.moveTimeout = setInterval(() => {\n            this.isMoving = false;\n          }, 249);\n        }\n      },\n      onMove: ($event) => {\n        if (this.swipeGesture.enabled) {\n          this.handleMoving('moving', $event);\n        }\n      },\n      onEnd: ($event) => {\n        if (this.swipeGesture.enabled) {\n          this.handleMoving('moveend', $event);\n        }\n      },\n    }, true);\n    gesture.enable();\n    this.GESTURE_CREATED = true;\n  }\n\n  /**\n   * Send emit tags for clicks\n   */\n  private emitTaps() {\n    if (this.tapCount === 1 && this.tapGesture.enabled) {\n      if (this.debugMode) {\n        console.log('1 Tap ');\n      }\n      this.tap.emit();\n    } else if (this.tapCount === 2 && this.doubleTapGesture.enabled) {\n      if (this.debugMode) {\n        console.log('2 Tap');\n      }\n      this.doubleTap.emit();\n    }\n    this.resetTaps();\n  }\n\n  /**\n   * Clear counters and timeouts for taps\n   */\n  private resetTaps() {\n    clearTimeout(this.tapTimeout); // clear the old timeout\n    this.tapCount = 0;\n    this.tapTimeout = null;\n    this.lastTap = 0;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { TouchSwipePage } from './touch-swipe.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: TouchSwipePage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class TouchSwipePageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { TouchSwipePageRoutingModule } from './touch-swipe-routing.module';\n\nimport { TouchSwipePage } from './touch-swipe.page';\n\nimport { SocialGestureDirective } from './../../../../../directives/social-gestures/social-gestures.directive';\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    TouchSwipePageRoutingModule\n  ],\n  declarations: [TouchSwipePage, SocialGestureDirective],\n})\nexport class TouchSwipePageModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { Gesture } from './../../../../../directives/social-gestures/social-gestures.directive';\nimport { ToastController } from '@ionic/angular';\n\n@Component({\n  selector: 'app-touch-swipe',\n  templateUrl: './touch-swipe.page.html',\n  styleUrls: ['./touch-swipe.page.scss'],\n})\nexport class TouchSwipePage implements OnInit {\n\n\n  gestureOptsTap: Gesture[] = [\n    { name: 'tap' },\n    { name: 'doubleTap' },\n  ];\n\n\n  gestureOptsPress: Gesture[] = [\n    { name: 'press', interval: 1500 },\n  ];\n\n\n  gestureOptsSwipe: Gesture[] = [\n    { name: 'swipe', direction: ['left', 'right'] },\n  ];\n\n  direction = null\n\n  constructor(\n    public toastController: ToastController\n  ) { }\n\n  ngOnInit() {\n  }\n\n  onTap() {\n    this.presentToast('Tap');\n  }\n\n  onDoubleTap() {\n    this.presentToast('DoubleTap');\n  }\n\n  onPress() {\n    this.presentToast('Long Press 1.5s');\n  }\n\n  onSwipe(e) {\n    this.direction = e.dirX;\n  }\n\n  onMoveed() {\n    this.presentToast('Swipe End ' + this.direction);\n  }\n\n\n  async presentToast(msgm: string) {\n    const toast = await this.toastController.create({\n      message: msgm,\n      duration: 500\n    });\n    toast.present();\n  }\n\n}\n","<ion-header>\n  <ion-toolbar>\n    <ion-buttons slot=\"start\">\n      <ion-back-button defaultHref=\"/gestures\"></ion-back-button>\n    </ion-buttons>\n    <ion-title>Touch Swipe</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n\n  <ion-card color=\"primary\"\n  appSocialGestures\n  [gestureOpts]=\"gestureOptsTap\"\n  debugMode=\"true\"\n  (tap)=\"onTap()\"\n  (doubleTap)=\"onDoubleTap()\"\n  >\n    <ion-card-header>\n      <ion-card-subtitle>Exemple 01</ion-card-subtitle>\n      <ion-card-title>Tap and DoubleTap</ion-card-title>\n    </ion-card-header>\n  </ion-card>\n\n\n  <ion-card\n  color=\"secondary\"\n  appSocialGestures\n  [gestureOpts]=\"gestureOptsPress\"\n  debugMode=\"true\"\n  (press)=\"onPress()\"\n  >\n    <ion-card-header>\n      <ion-card-subtitle>Exemple 02</ion-card-subtitle>\n      <ion-card-title>LongPress after 1.5 seconds</ion-card-title>\n    </ion-card-header>\n  </ion-card>\n\n\n  <ion-card\n  color=\"tertiary\"\n  appSocialGestures\n  [gestureOpts]=\"gestureOptsSwipe\"\n  debugMode=\"true\"\n  (swipe)=\"onSwipe($event)\"\n  (swipeEnd)=\"onMoveed()\"\n  >\n    <ion-card-header>\n      <ion-card-subtitle>Exemple 03</ion-card-subtitle>\n      <ion-card-title>Swipe Lefth Right</ion-card-title>\n    </ion-card-header>\n  </ion-card>\n\n\n</ion-content>"]}